package com.xuhj.classfeaturepractise;

public class JavaDuotaiPra {
/**
 * 接口格式：接口中的每一个方法都被隐式的定义为public abstract,所以不能定义为静态代码块
 *   public interface 接口名称 {
 *   // 抽象方法使用 abstract 关键字修饰，可以省略，没有方法体。该方法供子类实现使用。
 *   // 默认方法使用 default 修饰，不可省略，供子类调用或者子类重写。必须要有函数体
 *   // 静态方法 static 修饰，供接口直接调用,必须有方法体
 *   // 私有方法 private 修饰，供接口中的默认方法或者静态方法调用。如果说默认方法和静态方法有很多相同的逻辑，我们可以抽象抽出来放在private中来供其调用
 *     //从java9开始，接口中可以定义私有方法，因为当前是1.8版本所以现在还不能创建私有方法
 *  }
 * 类与接口的关系为实现关系，即类实现接口，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类 似继承，格式相仿，只是关键字不同，实现使用 implements 关键字。
 * 非抽象子类实现接口:
 * 1. 必须重写接口中所有抽象方法。
 * 2. 继承了接口的默认方法，即可以直接调用，也可以重写。
 * 私有方法的使用
 * 私有方法:只有默认方法可以调用。 私有静态方法:默认方法和静态方法可以调用。
 * 如果一个接口中有多个默认方法，并且方法中有重复的内容，那么可以抽取出来，封装到私有方法中，供默认方法 去调用。从设计的角度讲，私有的方法是对默认方法和静态方法的辅助.
 *
 *  接口的多实现 之前学过，在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接
 * 口的多实现。并且，一个类能继承一个父类，同时实现多个接口。 实现格式:
 * class 类名 [extends 父类名] implements 接口名1,接口名2,接口名3... {}
 * 接口中，有多个抽象方法时，实现类必须重写所有抽象方法。如果抽象方法有重名的，只需要重写一次。
 * 接口中，有多个默认方法时，实现类都可继承使用。如果默认方法有重名的，必须重写一次。
 * 接口中，存在同名的静态方法并不会冲突，原因是只能通过各自接口名访问静态方法。
 * 当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执 行父类的成员方法。代码如下:
 * 一个接口能继承另一个或者多个接口，这和类之间的继承比较相似。接口的继承使用 extends 关键字，子接口继承父接口的方法。如果父接口中的默认方法有重名的，那么子接口需要重写一次。
 *小贴士: 子接口重写默认方法时，default关键字可以保留。 子类重写默认方法时，default关键字不可以保留。
 * 接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用public static final修饰。 接口中，没有构造方法，不能创建对象。
 * 接口中，没有静态代码块。
 *
 * */
//多态
    /**
     * 多态: 是指同一行为，具有多个不同表现形式。
     * 1. 继承或者实现【二选一】
     * 2. 方法的重写【意义体现:不重写，无意义】
     * 3. 父类引用指向子类对象【格式体现】
     * 当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误;如果有，执行的是子类重写 后方法。
     *
     * */

}
